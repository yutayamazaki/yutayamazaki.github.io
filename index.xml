<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ざきメモ</title>
    <link>https://yutayamazaki.github.io/</link>
    <description>Recent content on ざきメモ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jul 2020 01:56:23 +0900</lastBuildDate>
    
	<atom:link href="https://yutayamazaki.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mask R-CNNをちょっと知る</title>
      <link>https://yutayamazaki.github.io/posts/mask_rcnn/</link>
      <pubDate>Mon, 06 Jul 2020 01:56:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/mask_rcnn/</guid>
      <description>仕事でインスタンスセグメンテーションを触る必要があり著名なモデルであるMask R-CNNについて調べたのでまとめる．Facebook AI Researchが2017年に発表したモデルで，基本的には物体検出アルゴリズムであるFaster R-CNNと同じ．Faster R-CNNの特徴マップからboxの位置・クラスを出力する部分に，セグメンテーションを行うモジュールを追加しただけ．</description>
    </item>
    
    <item>
      <title>Okapi BM25を動かしてみる</title>
      <link>https://yutayamazaki.github.io/posts/okapi_bm25/</link>
      <pubDate>Mon, 06 Jul 2020 01:55:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/okapi_bm25/</guid>
      <description>Okapi BM25は単語の出現頻度ベースの文書検索のランキングアルゴリズムのひとつ．文書検索周りの調査の過程でOkapi BM25を実装したのでその解説とともに記事にした．</description>
    </item>
    
    <item>
      <title>アノテーションを半自動で生成するPolygonRNNとPolygon RNN&#43;&#43;</title>
      <link>https://yutayamazaki.github.io/posts/polygon_rnn/</link>
      <pubDate>Mon, 06 Jul 2020 01:54:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/polygon_rnn/</guid>
      <description>主要な画像のタスクだと領域検出 &amp;gt; 物体検出 &amp;gt; 分類の順でアノテーションのコストがかかる．Polygon RNNは最もアノテーションにコストがかかる領域検出のアノテーションを多角形で半自動で生成しようという試み．CNNで画像から特徴抽出を行い，ConvLSTMレイヤーを通して多角形の頂点を系列として予測する．この結果をアノテーターが微調整することで，必要なコストを下げることができる．</description>
    </item>
    
    <item>
      <title>勾配ブースティングを理解する</title>
      <link>https://yutayamazaki.github.io/posts/gradient_boosting/</link>
      <pubDate>Mon, 06 Jul 2020 01:53:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/gradient_boosting/</guid>
      <description>Gradient Boosting Decision Treeのアルゴリズムを理解する．</description>
    </item>
    
    <item>
      <title>Pythonでサーバーのログを1箇所に集約する</title>
      <link>https://yutayamazaki.github.io/posts/python_remote_logging/</link>
      <pubDate>Mon, 06 Jul 2020 01:52:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/python_remote_logging/</guid>
      <description>複数台のサーバーでアプリケーションを運用する際にログを1箇所にまとめる必要がるのでその手法のメモ．&lt;code&gt;logging.handlers.HTTPHandler&lt;/code&gt;を用いると簡単に実現できる．結論としてはリモートサーバーからログのメッセージをHTTP通信で受けとり，それを受け手のアプリでloggingするだけ．</description>
    </item>
    
    <item>
      <title>Nuxt.jsをAWS Lambdaにデプロイする</title>
      <link>https://yutayamazaki.github.io/posts/nuxt_lambda/</link>
      <pubDate>Mon, 06 Jul 2020 01:51:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/nuxt_lambda/</guid>
      <description>Nuxt.jsのプロジェクトをAWS Lambdaでデプロイすることに関するメモ．</description>
    </item>
    
    <item>
      <title>アンサンブル学習</title>
      <link>https://yutayamazaki.github.io/posts/ensemble/</link>
      <pubDate>Mon, 06 Jul 2020 01:50:33 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/ensemble/</guid>
      <description>バギング・ランダムフォレスト・ブースティングの主要な手法に関してまとめる．</description>
    </item>
    
    <item>
      <title>決定木</title>
      <link>https://yutayamazaki.github.io/posts/decision_tree/</link>
      <pubDate>Mon, 06 Jul 2020 01:50:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/decision_tree/</guid>
      <description>決定木は大まかにはあるデータに対して全てif, else ifのような条件分岐から予測を行うアルゴリズムである．この性質上人間の解釈性が高く，また学習と予測が高速に動作するという利点がある．ある特徴量の閾値でデータを分割した際の不純度の減少量から特徴量の重要度を算出することができ，機械学習のモデル構築において広く利用されている．2020年現在主流の勾配ブースティング系アルゴリズムの弱識別器にはほとんど決定木が利用されている．</description>
    </item>
    
    <item>
      <title>Factorization Machinesによるレコメンドの仕組み</title>
      <link>https://yutayamazaki.github.io/posts/factorization_machines/</link>
      <pubDate>Mon, 06 Jul 2020 01:37:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/factorization_machines/</guid>
      <description>先日&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/extending-amazon-sagemaker-factorization-machines-algorithm-to-predict-top-x-recommendations/&#34;&gt;AWSのレコメンドシステム構築記事&lt;/a&gt;を読んでいた知人の方から質問されたことへの回答を自分用のメモとしてまとめる．kNNをアイテム潜在ベクトルで学習し，ユーザー潜在ベクトルを入力として推論を行なった結果がなぜレコメンドとして妥当なのかという内容の質問．結論としてはFMではあるユーザーとそのユーザーが高く評価したアイテムは潜在空間上で近くなるように値が更新される，アイテムのみで学習を行いユーザーのみで推論を行うため，ユーザー毎やアイテム毎の方が距離が近くなっても問題がない．</description>
    </item>
    
    <item>
      <title>Kaggle解法まとめ SIIM-ACR Pneumothorax Segmentation</title>
      <link>https://yutayamazaki.github.io/posts/kaggle_siim_acr/</link>
      <pubDate>Mon, 06 Jul 2020 01:37:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/kaggle_siim_acr/</guid>
      <description>仕事で領域検出をやる必要に駆られているので領域検出の過去コンペ解放をサーベイする．SIIM-ACR Pneumothorax Segmentationは2019年8月28日まで開催していた領域検出コンペで評価指標はDiceCoefficient.</description>
    </item>
    
    <item>
      <title>DockerでPyTorchの実行環境を整備する 2019年11月</title>
      <link>https://yutayamazaki.github.io/posts/docker_pytorch/</link>
      <pubDate>Mon, 06 Jul 2020 01:35:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/docker_pytorch/</guid>
      <description>PyTorchによるDeep Learningの実行環境をDockerコンテナで整備する．Docker version19.03以降，ホストOSのGPUドライバとnvidia-container-runtimeさえあれば他はコンテナに閉じ込められる．</description>
    </item>
    
    <item>
      <title>Serverless Frameworkの運用Tips</title>
      <link>https://yutayamazaki.github.io/posts/serverless/</link>
      <pubDate>Mon, 06 Jul 2020 01:35:23 +0900</pubDate>
      
      <guid>https://yutayamazaki.github.io/posts/serverless/</guid>
      <description>Serverless Frameworkを使う上で気をつけるべきことをまとめる．</description>
    </item>
    
  </channel>
</rss>